{"version":3,"file":"app.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AAgBA;AAAA;AAAA;AAfA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AApBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAYA;AAgBA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AAoRA;AAAA;AAAA;AAlRA;AAEA;AAEA;AAEA;AAEA;AAEA;AAyQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAvQA;AAAA;AAAA;AADA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAQA;;;;;;;;;;;;;;;;;;;;;AC1WA;AACA;AACA;;AAEA;AACA;AACA;;AA4BA;AAEA;AAqEA;AAAA;AAAA;AAnEA;AAAA;AAAA;AAoEA;AACA;AACA;AAAA;AAAA;AAAA;AAjEA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAFA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AADA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AADA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;ACvGA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;ACznDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACNA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;ACVA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxBA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACjBA;AAMA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;AClBA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;ACTA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA","sources":["webpack://test_3_16/._src_app.ts","webpack://test_3_16/./src/app.ts?bc77","webpack://test_3_16/._src_clients_CubeAuthClient.ts","webpack://test_3_16/._src_clients_CubeLangClient.ts","webpack://test_3_16/._src_clients_GlobalDataClient.ts","webpack://test_3_16/._src_clients_TaroHttpClient.ts","webpack://test_3_16/._src_i18n_I18nMap.ts","webpack://test_3_16/._src_plugins_AllPlugins.ts","webpack://test_3_16/._src_plugins_CubeAuth.ts","webpack://test_3_16/._src_plugins_CubeLang.ts","webpack://test_3_16/._src_plugins_GlobalData.ts","webpack://test_3_16/._src_plugins_RequestConfig.ts","webpack://test_3_16/._src_plugins_TaroRequest.ts","webpack://test_3_16/._src_store_index.ts"],"sourcesContent":["import { createApp } from 'vue';\nimport './app.scss';\nimport store from './store';\nimport { CommonUtil } from './utils/CommonUtil';\nimport TaroRequest from './plugins/TaroRequest';\nimport Taro from '@tarojs/taro';\nimport AllPlugins from './plugins/AllPlugins';\n\nCommonUtil.setTaro(Taro);\n\nconst App = createApp({\n    onShow(_options: any) { },\n    // 入口组件不需要实现 render 方法，即使实现了也会被 taro 所覆盖\n});\n\nApp.use(store).use(TaroRequest).use(AllPlugins);\n\nexport default App;\n","import '@tarojs/plugin-platform-weapp/dist/runtime'\nimport '@tarojs/plugin-html/dist/runtime'\n\nimport { window } from '@tarojs/runtime'\nimport { createVue3App } from '@tarojs/plugin-framework-vue3/dist/runtime'\nimport { initPxTransform } from '@tarojs/taro'\n\nimport component from \"../node_modules/babel-loader/lib/index.js??clonedRuleSet-11.use[0]!./app.ts\"\n\nimport { h, createApp } from 'vue'\n\nvar config = {\"pages\":[\"pages/index/index\",\"pages/test/list\",\"pages/test/_id\"],\"window\":{\"backgroundTextStyle\":\"light\",\"navigationBarBackgroundColor\":\"#fff\",\"navigationBarTitleText\":\"WeChat\",\"navigationBarTextStyle\":\"black\"},\"tabBar\":{\"color\":\"#666\",\"selectedColor\":\"#f38433\",\"backgroundColor\":\"#fff\",\"list\":[{\"pagePath\":\"pages/index/index\",\"text\":\"首页\",\"iconPath\":\"assets/images/service.png\",\"selectedIconPath\":\"assets/images/service-active.png\"},{\"pagePath\":\"pages/test/list\",\"text\":\"测试\",\"iconPath\":\"assets/images/service.png\",\"selectedIconPath\":\"assets/images/service-active.png\"}]}};\nwindow.__taroAppConfig = config\nvar inst = App(createVue3App(component, h, config))\n\ninitPxTransform({\n  designWidth: function designWidth(input) {\n                    var _input_file;\n                    // 配置 NutUI 375 尺寸\n                    if ((input === null || input === void 0 ? void 0 : (_input_file = input.file) === null || _input_file === void 0 ? void 0 : _input_file.replace(/\\\\+/g, \"/\").indexOf(\"@nutui\")) > -1) {\n                        return 375;\n                    }\n                    // 全局使用 Taro 默认的 750 尺寸\n                    return 375;\n                },\n  deviceRatio: {\"375\":2,\"640\":1.17,\"750\":1,\"828\":0.905},\n  baseFontSize: 20,\n  unitPrecision: undefined,\n  targetUnit: undefined\n})\n","class CubeAuthTokenObj implements CubeAuthToken {\r\n    accessToken?: string = null;\r\n    refreshToken?: string = null;\r\n    expireIn?: number = null;\r\n    expireAt?: number = null;\r\n    get() {\r\n        const obj: CubeAuthToken = JSON.parse(JSON.stringify(this));\r\n        obj.accessToken = obj.accessToken || '';\r\n        obj.refreshToken = obj.refreshToken || '';\r\n        obj.expireAt = obj.expireAt || 0;\r\n        obj.expireIn = this.expireAt ? Math.trunc((obj.expireAt - Date.now()) / 1000) : 0; // 为了expireIn单位与服务端统一, expireIn转化为秒\r\n        return obj;\r\n    };\r\n    accessTokenValid() {\r\n        return !!this.accessToken && this.expireAt > Date.now();\r\n    };\r\n    constructor(obj: CubeAuthToken) {\r\n        if (obj) {\r\n            this.accessToken = obj.accessToken;\r\n            this.refreshToken = obj.refreshToken;\r\n            if (obj.expireAt) {\r\n                this.expireAt = obj.expireAt;\r\n            } else if (obj.expireIn) {\r\n                this.expireAt = Date.now() + obj.expireIn * 1000;\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\ntype RefreshTokenAction = (refreshToken: string) => Promise<CubeAuthToken>;\r\n\r\ntype LoginAction = () => Promise<string>;\r\n\r\ntype LogoutAction = (accessToken: string) => Promise<string>;\r\n\r\ntype OnSaveToken = (token: CubeAuthToken) => void;\r\n\r\ntype SignInCallback = (params: { code: string; state: string; type: any; }) => Promise<CubeAuthToken>;\r\n\r\ntype EventKey = 'init-end' | 'refresh-token-success' | 'refresh-token-fail' | 'refresh-token-end';\r\n\r\ntype EventMap = Map<string, Function>;\r\n\r\nexport class CubeAuthConfig {\r\n    /** 应用名称 */\r\n    name: string = '';\r\n    /** GlobalData实例 */\r\n    tokenKey: VuexStateKey = null;\r\n    /** GlobalData实例 */\r\n    globalData: GlobalDataInstance = null;\r\n    /** 刷新token方法 (refreshToken: string) => Promise<CubeAuthToken> */\r\n    refreshToken?: RefreshTokenAction = null;\r\n    /** 登录方法 () => Promise<string> */\r\n    login?: LoginAction = null;\r\n    /** 登出配置 (accessToken: string) => Promise<string> */\r\n    logout?: LogoutAction = null;\r\n    /** 登录回调方法 (params: { code: string; state: string; type: string; }) => Promise<CubeAuthToken> */\r\n    signInCallback?: SignInCallback = null;\r\n    /** 保存token回调 */\r\n    onSaveToken?: OnSaveToken = null;\r\n    /** 是否启用log */\r\n    log?: boolean = true;\r\n    /** 刷新token失败后重新尝试间隔毫秒数，默认10000，设置0或者false则不尝试重新刷新token */\r\n    refreshFailedRetryMillisecond?: number | false = 10000;\r\n    /** 创建实例后立即刷新token */\r\n    refreshAfterInit?: boolean = false;\r\n    /** 是否使用CubeAuth内置刷新token程序 */\r\n    refreshTokenAuto?: boolean = true;\r\n};\r\n\r\n\r\n/**\r\n * <md>CubeAuthClient\r\n */\r\n\r\n/**\r\n * <mds>**新qpass单点登录，app保存token，自动保存并刷新token**\r\n */\r\n\r\n\r\nexport class CubeAuthClient {\r\n\r\n    private tokenKey: Extract<VuexStateKey, 'token'> = null;\r\n\r\n    private globalData: GlobalDataInstance = null;\r\n\r\n    private config: CubeAuthConfig = new CubeAuthConfig();\r\n\r\n    private timer: any = null;\r\n\r\n    private refreshing: boolean = false;\r\n\r\n    private events: EventMap = new Map();\r\n\r\n    private count: number = 1;\r\n\r\n    private $log(message?: any, ...optionalParams: any[]) {\r\n        if (this.config.log !== false) {\r\n            console.log('<--CubeAuth-->', message, ...optionalParams);\r\n        };\r\n    };\r\n\r\n    private tt(ms: number) {\r\n        const u = [1000, 60, 60, 24], unit = ['毫秒', '秒', '分钟', '小时', '天'];\r\n        let res = [ms];\r\n        for (var i = 0; i < u.length; i++) {\r\n            const n = u[i], x = res[i];\r\n            if (x >= n) {\r\n                res[i] = x % n;\r\n                res.push(Math.trunc(x / n));\r\n            } else {\r\n                break;\r\n            };\r\n        };\r\n        return res.map((s, j) => (s > 0 ? s + unit[j] : '')).reverse().join('');\r\n    };\r\n\r\n    private action(key: EventKey) {\r\n        this.events.forEach((callback, name) => {\r\n            if (name.startsWith(key)) {\r\n                callback();\r\n                if (/--ONCE$/.test(name)) {\r\n                    this.events.delete(name);\r\n                };\r\n            };\r\n        });\r\n    };\r\n\r\n    private mergeObject(obj1: any, obj2: any) {\r\n        function merge(a: any, b: any) {\r\n            return a && b && typeof a == 'object' && typeof b == 'object';\r\n        };\r\n        if (merge(obj1, obj2)) {\r\n            for (const key in obj2) {\r\n                if (merge(obj1[key], obj2[key])) {\r\n                    this.mergeObject(obj1[key], obj2[key]);\r\n                } else {\r\n                    obj1[key] = obj2[key];\r\n                };\r\n            }\r\n        };\r\n    };\r\n\r\n    /** 获取token对象，{ accessToken?: string; expire?: number; refreshToken?: string; } */\r\n    private getTokenObj() {\r\n        const obj = this.globalData.get(this.tokenKey, 'localStorage');\r\n        return new CubeAuthTokenObj(obj);\r\n    };\r\n\r\n    /** 判断是否存在accessToken，并且accessToken未过期 */\r\n    isLogin() {\r\n        return this.getTokenObj().accessTokenValid();\r\n    };\r\n\r\n    /** 获取accessToken */\r\n    getAccessToken() {\r\n        return this.getTokenObj().accessToken;\r\n    };\r\n\r\n    /** 获取refreshToken */\r\n    getRefreshToken() {\r\n        return this.getTokenObj().refreshToken;\r\n    };\r\n\r\n    /** 获取过期时间, 单位ms */\r\n    getExpireIn() {\r\n        return this.getTokenObj().get().expireIn * 1000;\r\n    };\r\n\r\n    /** 停止自动刷新token */\r\n    stopAutoRefreshToken() {\r\n        clearTimeout(this.timer);\r\n    };\r\n\r\n    /** 启动自动刷新token程序 */\r\n    startAutoRefreshToken() {\r\n        this.stopAutoRefreshToken(); // 清除上一个刷新token的timeout程序\r\n        let ms = Math.trunc(this.getExpireIn() * 0.66); // 获取token过期时间剩余大约1/3的时候的剩余毫秒数\r\n        ms = ms > 86400000 ? 86400000 : ms; // 限制ms不超过1天，避免setTimeout因毫秒数过大无法执行\r\n        ms = ms < 60000 ? 60000 : ms; // 限制ms不小于1分钟，避免因过期时间太小导致刷新过于频繁\r\n        ms = Math.round(ms / 60000) * 60000; // 限制ms为分钟的整数倍\r\n        this.timer = setTimeout(() => this.refreshToken(), ms);\r\n        this.$log(this.tt(ms) + '后刷新token');\r\n    };\r\n\r\n    /** 保存token信息(accessToken，refreshToken，expireIn) */\r\n    setToken(token: CubeAuthToken) {\r\n        this.$log('正在保存token');\r\n        return new Promise<void>(resolve => {\r\n            if (!token) {\r\n                this.$log('保存token失败, tokenObj为空');\r\n                resolve();\r\n            } else {\r\n                const obj = new CubeAuthTokenObj(token);\r\n                if (obj.accessTokenValid()) {\r\n                    const info = obj.get();\r\n                    this.$log(`accessToken: ${info.accessToken.slice(0, 5)}...${info.accessToken.slice(-5)}, refreshToken: ${info.refreshToken.slice(0, 5)}...${info.refreshToken.slice(-5)}, expireIn: ${info.expireIn}`);\r\n                    this.globalData.set(this.tokenKey, info, 'localStorage');\r\n                    this.$log('保存token成功');\r\n                    if (this.config.refreshTokenAuto) {\r\n                        this.$log('启动自动刷新token程序');\r\n                        this.startAutoRefreshToken();\r\n                    };\r\n                    if (typeof this.config.onSaveToken == 'function') {\r\n                        this.config.onSaveToken(obj);\r\n                    };\r\n                    resolve();\r\n                } else if (obj.refreshToken) {\r\n                    this.$log('token已过期, 正在自动刷新');\r\n                    this.refreshToken().then(() => resolve());\r\n                } else {\r\n                    this.$log('保存token失败, token: ' + JSON.stringify(token));\r\n                };\r\n            };\r\n        });\r\n    };\r\n\r\n    /** 删除token信息(accessToken，refreshToken，expireIn) */\r\n    rmToken() {\r\n        this.globalData.del('token', 'localStorage');\r\n    };\r\n\r\n    /** 刷新token, 刷新成功返回Promise.resolve(true)，失败或没有refreshToken返回Promise.resolve(false) */\r\n    refreshToken(refreshToken?: string) {\r\n        return new Promise<boolean>(resolve => {\r\n            refreshToken = refreshToken || this.getRefreshToken();\r\n            const action = this.config.refreshToken;\r\n            const handle = (msg: string, res = false, key: EventKey = 'refresh-token-end') => {\r\n                this.refreshing = false;\r\n                this.$log(msg);\r\n                resolve(res);\r\n                this.action(key);\r\n            };\r\n            const end = (msg: string) => setTimeout(() => handle(msg), 10), success = (msg: string) => handle(msg, true, 'refresh-token-success'), fail = (msg: string) => handle(msg, false, 'refresh-token-fail');\r\n            if (this.refreshing) {\r\n                end('刷新token未被执行, 已有一个刷新token程序正在执行中');\r\n            } else if (!refreshToken) {\r\n                end('刷新token未被执行, 缺少“refreshToken”');\r\n            } else if (typeof action != 'function') {\r\n                end('刷新token未被执行, 配置缺少刷新token方法');\r\n            } else if (typeof localStorage == 'undefined') {\r\n                end('刷新token未被执行, 当前不是客户端环境');\r\n            } else {\r\n                this.refreshing = true;\r\n                action(refreshToken).then(tokenObj => {\r\n                    if (tokenObj) {\r\n                        if (new CubeAuthTokenObj(tokenObj).accessTokenValid()) {\r\n                            success('刷新token成功');\r\n                            this.setToken(tokenObj);\r\n                        } else {\r\n                            fail(`刷新token失败, API返回tokenObj缺少${['accessToken', 'expireIn'].filter(key => !tokenObj[key]).join('、')}`);\r\n                        };\r\n                    } else {\r\n                        fail('刷新token失败, API返回tokenObj为空');\r\n                    };\r\n                }).catch(err => {\r\n                    fail(`刷新token失败${err ? ', ' + err.message : ''}`);\r\n                    if (this.config.refreshFailedRetryMillisecond) {\r\n                        this.$log(this.tt(this.config.refreshFailedRetryMillisecond) + '后重新尝试刷新token');\r\n                        this.timer = setTimeout(() => this.refreshToken(), this.config.refreshFailedRetryMillisecond);\r\n                    };\r\n                }).finally(() => end(`第${this.count++}次刷新token结束`));\r\n            };\r\n        });\r\n    };\r\n\r\n    /** oAuth登录(需配置login方法) */\r\n    login() {\r\n        const action = this.config.login;\r\n        if (typeof action == 'function') {\r\n            this.$log('正在获取登录地址');\r\n            action().then(url => {\r\n                this.$log('获取登录地址成功, 即将跳转至: ' + url);\r\n                location.href = url;\r\n            }).catch(() => { });\r\n        };\r\n    };\r\n\r\n    /** 登出(需配置logout方法) */\r\n    logout() {\r\n        if (typeof this.config.logout == 'function') {\r\n            this.config.logout(this.getAccessToken()).then(target => {\r\n                this.rmToken();\r\n                location.href = target;\r\n            }).catch(() => { });\r\n        };\r\n    };\r\n\r\n    /** 登录回调，获取token */\r\n    signInCallback(params: { code: string; state: string; type: any; }) {\r\n        return new Promise<CubeAuthToken>((resolve, reject) => {\r\n            const action = this.config.signInCallback;\r\n            if (typeof action == 'function') {\r\n                this.$log('登录成功, 正在获取token信息');\r\n                action(params).then(res => {\r\n                    this.$log('获取token成功');\r\n                    this.setToken(res);\r\n                    resolve(res);\r\n                }).catch(reject);\r\n            } else {\r\n                reject();\r\n            };\r\n        });\r\n    };\r\n\r\n    /** 设置配置项 */\r\n    setConfig(config: CubeAuthConfig) {\r\n        this.mergeObject(this.config, config);\r\n        this.tokenKey = config.tokenKey as any;\r\n        this.globalData = config.globalData;\r\n        return this;\r\n    };\r\n\r\n    /** 监听事件, 匿名函数无法删除 */\r\n    $on(event: EventKey, callback: Function) {\r\n        if (typeof callback == 'function') {\r\n            let name = callback.name || `${Math.trunc(Math.random() * 1000000)}`;\r\n            this.events.set(`${event}-${name}`, callback);\r\n        };\r\n        return this;\r\n    };\r\n\r\n    /** 监听事件, 只执行一次 */\r\n    $once(event: EventKey, callback: Function) {\r\n        if (typeof callback == 'function') {\r\n            this.events.set(`${event}-${Math.trunc(Math.random() * 1000000)}--ONCE`, callback);\r\n        };\r\n        return this;\r\n    };\r\n\r\n    /** 删除监听的事件, 匿名函数无法删除 */\r\n    $rm(event: EventKey, callback?: Function) {\r\n        if (typeof callback == 'function' && callback.name) {\r\n            this.events.delete(`${event}-${callback.name}`);\r\n        };\r\n        return this;\r\n    };\r\n\r\n    /** 初始化 */\r\n    init() {\r\n        const tokenObj = this.getTokenObj().get();\r\n        this.$log('正在读取已保存的token');\r\n        if (this.config.refreshAfterInit) {\r\n            this.$log('配置refreshAfterInit为true, 正在刷新');\r\n            this.refreshToken(tokenObj.refreshToken).then(() => {\r\n                this.$log('初始化完成');\r\n                this.action('init-end');\r\n            });\r\n        } else {\r\n            this.setToken(tokenObj).then(() => {\r\n                this.$log('初始化完成');\r\n                this.action('init-end');\r\n            });\r\n        };\r\n    };\r\n\r\n    constructor(config: CubeAuthConfig) {\r\n        this.$log('初始化开始');\r\n        this.$log('正在保存配置' + (config.name ? ', 应用名称: ' + config.name : ''));\r\n        this.setConfig(config);\r\n    };\r\n\r\n};","/**\r\n * <md>CubeLang\r\n */\r\n\r\n/**\r\n * <mds>**需要new CubeLang实例，在实例中设置i18n map，id并调用实例中的$t、$tr、$tk方法进行翻译**\r\n */\r\n\r\nexport interface CubeLangCore<I18NMAP extends object> {\r\n\r\n    /**\r\n     * 只有1个key时翻译方法\r\n     * @param key keyof I18NMAP\r\n     * @param values 替换翻译中{0}、{1}...的值\r\n     * @returns string\r\n     */\r\n    $t<T extends keyof I18NMAP, P extends Array<string | number>>(key: T, ...values: P): I18NMAP[T];\r\n\r\n    /**\r\n     * 以第一个key为基础，把valueKeys翻译后按顺序替换到第一个key的翻译后的{0}、{1}...中\r\n     * @param key keyof I18NMAP\r\n     * @param valueKeys ...(keyof I18NMAP)[]\r\n     * @returns string\r\n     */\r\n    $tr<T extends keyof I18NMAP, P extends Array<keyof I18NMAP>>(key: T, ...valueKeys: P): I18NMAP[T] | I18NMAP[P[number]];\r\n\r\n    /**\r\n     * 多个key组合时翻译方法，从后往前把翻译后的值替换到前一个翻译的{0}中\r\n     * @param key keyof I18NMAP\r\n     * @param keys ...(keyof I18NMAP)[]\r\n     * @returns string\r\n     */\r\n    $tk<T extends keyof I18NMAP, P extends Array<keyof I18NMAP>>(key: T, ...keys: P): I18NMAP[T] | I18NMAP[P[number]];\r\n\r\n};\r\n\r\nexport class CubeLangClient<LANGID extends string, I18NMAP extends object> implements CubeLangCore<I18NMAP> {\r\n\r\n    private _getLangId: () => LANGID = () => null;\r\n\r\n    private _i18nMap: { [K in LANGID]?: I18NMAP } = {};\r\n\r\n    private langId(): LANGID {\r\n        return this._getLangId() || 'zh_TW' as any;\r\n    };\r\n\r\n    private i18nMap(): I18NMAP {\r\n        const maps: any = this._i18nMap || {};\r\n        return maps[this.langId()] || {};\r\n    };\r\n\r\n    $t<T extends keyof I18NMAP, P extends (string | number)[]>(key: T, ...values: P): I18NMAP[T] {\r\n        let res: any = this.i18nMap()[key];\r\n        if (res) {\r\n            for (let i = 0; i < values.length; i++) {\r\n                res = res.replace(new RegExp(`\\\\{${i}\\\\}`), !values[i] && values[i] !== 0 ? '' : values[i]) as any;\r\n            };\r\n        } else {\r\n            console.log(`<!== CubeLang ==>多语言错误: 找不到key:\"${String(key)}\"对应的值`);\r\n            res = key || '';\r\n        };\r\n        res = res.replace(/\\{\\d+\\}/g, '');\r\n        return res;\r\n    };\r\n\r\n    $tr<T extends keyof I18NMAP, P extends (keyof I18NMAP)[]>(key: T, ...valueKeys: P): I18NMAP[T] | I18NMAP[P[number]] {\r\n        let res: any = '';\r\n        const vals: any[] = valueKeys.map(key => this.$t(key));\r\n        res = this.$t(key, ...vals);\r\n        return res;\r\n    };\r\n\r\n    $tk<T extends keyof I18NMAP, P extends (keyof I18NMAP)[]>(key: T, ...keys: P): I18NMAP[T] | I18NMAP[P[number]] {\r\n        let res: any = '';\r\n        keys.reverse().forEach(k => res = this.$t(k as any, res));\r\n        res = this.$t(key, res);\r\n        return res;\r\n    };\r\n\r\n    /** 设置翻译、获取langId的方法 */\r\n    set(config: { i18nMap?: { [K in LANGID]?: I18NMAP }, getLangId?: () => LANGID }) {\r\n        if (config.i18nMap) {\r\n            this._i18nMap = config.i18nMap;\r\n        };\r\n        if (config.getLangId) {\r\n            this._getLangId = config.getLangId;\r\n        };\r\n        return this;\r\n    };\r\n\r\n    get(key: 'LANGID'): LANGID;\r\n    get(key: 'I18NMAP'): I18NMAP;\r\n    /**\r\n     * 获取当前lang map或者lang id\r\n     */\r\n    get(key: 'LANGID' | 'I18NMAP') {\r\n        if (key == 'LANGID') {\r\n            return this.langId();\r\n        } else if (key == 'I18NMAP') {\r\n            return this.i18nMap();\r\n        } else {\r\n            return null;\r\n        };\r\n    };\r\n\r\n    constructor(i18nMap: { [K in LANGID]?: I18NMAP }, getLangId: () => LANGID) {\r\n        this._i18nMap = i18nMap;\r\n        this._getLangId = getLangId;\r\n    };\r\n\r\n}","import { CommonUtil } from \"@/utils/CommonUtil\";\r\n\r\nexport class GlobalDataClient {\r\n\r\n    private keyPrefix = 'global_data_';\r\n\r\n    private store: any = null;\r\n\r\n    private vuexKey(name: string) {\r\n        return `set${name.charAt(0).toUpperCase() + name.slice(1)}`;\r\n    };\r\n\r\n    private vuexCommit(name: string, value: any) {\r\n        if (this.store) {\r\n            this.store.commit(this.vuexKey(name), value);\r\n        };\r\n    };\r\n\r\n    private storageKey(key: string) {\r\n        return this.keyPrefix + key;\r\n    };\r\n\r\n    private storage(type: StoreageType) {\r\n        return type == 'sessionStorage' ? sessionStorage : localStorage;\r\n    };\r\n\r\n    private storageGet(storageType: StoreageType, name: keyof VuexState) {\r\n        let item = null;\r\n        if (storageType) {\r\n            const str = this.storage(storageType).getItem(this.storageKey(name));\r\n            try {\r\n                item = JSON.parse(str);\r\n            } catch (error) {\r\n                console.log('<!-- GlobalData从Storage获取数据失败, ' + error.message + ' -->');\r\n            };\r\n        };\r\n        return item;\r\n    };\r\n\r\n    private storageSet(storageType: StoreageType, name: keyof VuexState, data: any) {\r\n        if (storageType) {\r\n            try {\r\n                this.storage(storageType).setItem(this.storageKey(name), JSON.stringify(data));\r\n            } catch (error) {\r\n                console.log('<!-- GlobalData保存数据到Storage失败, ' + error.message + ' -->');\r\n            };\r\n        };\r\n    };\r\n\r\n    private storageDel(storageType: StoreageType, name: keyof VuexState) {\r\n        if (storageType) {\r\n            try {\r\n                this.storage(storageType).removeItem(this.storageKey(name));\r\n            } catch (error) {\r\n                console.log('<!-- GlobalData从Storage删除数据失败, ' + error.message + ' -->');\r\n            };\r\n        };\r\n    };\r\n\r\n    setStore(value: any) {\r\n        if (value && !this.store) {\r\n            this.store = value;\r\n            const reg = new RegExp('^' + this.keyPrefix);\r\n            if (CommonUtil.isVue) {\r\n                const storages: StoreageType[] = ['localStorage', 'sessionStorage'];\r\n                storages.forEach(type => {\r\n                    for (let i = 0; i < this.storage(type).length; i++) {\r\n                        const k = this.storage(type).key(i);\r\n                        if (reg.test(k)) {\r\n                            const key = k.replace(reg, '') as any;\r\n                            const val = this.storageGet(type, key);\r\n                            this.vuexCommit(key, val);\r\n                        };\r\n                    };\r\n                });\r\n            } else {\r\n                CommonUtil.taro.getStorageInfoSync().keys.forEach(k => {\r\n                    if (reg.test(k)) {\r\n                        const key = k.replace(reg, '') as any;\r\n                        const val = CommonUtil.taro.getStorageSync(k);\r\n                        this.vuexCommit(key, val);\r\n                    };\r\n                });\r\n            };\r\n        };\r\n    };\r\n\r\n    get<T extends VuexStateKey>(key: T, storageType?: StoreageType): VuexState[T] {\r\n        let res = null;\r\n        if (this.store) {\r\n            res = this.store.state[key];\r\n        };\r\n        if (res === null && storageType) {\r\n            if (CommonUtil.isVue) {\r\n                res = this.storageGet(storageType, key);\r\n            } else {\r\n                res = CommonUtil.taro.getStorageSync(this.storageKey(key));\r\n            };\r\n        };\r\n        return res;\r\n    };\r\n\r\n    set<T extends VuexStateKey>(key: T, data: VuexState[T], storageType?: StoreageType) {\r\n        this.vuexCommit(key, data);\r\n        if (storageType) {\r\n            if (CommonUtil.isVue) {\r\n                this.storageSet(storageType, key, data);\r\n            } else {\r\n                CommonUtil.taro.setStorageSync(this.storageKey(key), data);\r\n            };\r\n        };\r\n    };\r\n\r\n    del<T extends VuexStateKey>(key: T, storageType?: StoreageType) {\r\n        this.vuexCommit(key, null);\r\n        if (storageType) {\r\n            if (CommonUtil.isVue) {\r\n                this.storageDel(storageType, key);\r\n            } else {\r\n                CommonUtil.taro.removeStorageSync(this.storageKey(key));\r\n            };\r\n        };\r\n    };\r\n\r\n}\r\n\r\n\r\n\r\n","import { BaseHttpRequest } from \"cube-common-lib\";\r\nimport Taro from \"@tarojs/taro\";\r\n\r\nexport class TaroHttpClient implements BaseHttpRequest {\r\n\r\n    getRequest(url: string, data: object, header: object): Promise<any> {\r\n        return new Promise<any>((resolve, fail) => {\r\n            Taro.request({ method: 'GET', url, data, header, success: res => resolve(res.data), fail });\r\n        });\r\n    };\r\n\r\n    postRequest(url: string, data: object, header: object, _onUploadProgress?: ((progressEvent: any) => void), responseType?: any): Promise<any> {\r\n        return new Promise<any>((resolve, fail) => {\r\n            Taro.request({ method: 'POST', url, data, header, success: res => resolve(res.data), fail, responseType });\r\n        });\r\n    };\r\n\r\n    putRequest(url: string, data: object, header: object): Promise<any> {\r\n        return new Promise<any>((resolve, fail) => {\r\n            Taro.request({ method: 'PUT', url, data, header, success: res => resolve(res.data), fail });\r\n        });\r\n    };\r\n\r\n    deleteRequest(url: string, data: object, header: object): Promise<any> {\r\n        return new Promise<any>((resolve, fail) => {\r\n            Taro.request({ method: 'DELETE', url, data, header, success: res => resolve(res.data), fail });\r\n        });\r\n    };\r\n\r\n    uploadFileRequest(url: string, params: object, headers: object): Promise<any> {\r\n        return new Promise<any>(success => {\r\n            success({ url, params, headers });\r\n        });\r\n    };\r\n\r\n    upload(url: string, params: object, header: object, filePath: any, name: any): Promise<any> {\r\n        return new Promise<any>((resolve, fail) => {\r\n            const formData = new FormData();\r\n            if (params && typeof params == 'object') {\r\n                for (const key in params) {\r\n                    formData.append(key, params[key]);\r\n                }\r\n            };\r\n            Taro.uploadFile({ url, formData, header, filePath, name, success: res => resolve(res.data), fail });\r\n        });\r\n    };\r\n\r\n    request<T = any>(method: any, url: string, data: object, header: object): Promise<T> {\r\n        return new Promise<T>((resolve, fail) => {\r\n            Taro.request({ method, url, data, header, success: res => resolve(res.data), fail });\r\n        });\r\n    };\r\n\r\n}","const map_zh_TW = {\"test\":\"測試\",\"login\":\"登錄\",\"back\":\"返回\",\"username\":\"用戶名\",\"password\":\"密碼\",\"toggle\":\"切換{0}\",\"language\":\"語言\"};\n\nconst map_zh_CN = {\"test\":\"测试\",\"login\":\"登录\",\"back\":\"返回\",\"username\":\"用户名\",\"password\":\"密码\",\"toggle\":\"切换{0}\",\"language\":\"语言\"};\n\nconst map_en_US = {\"test\":\"測試\",\"login\":\"登錄\",\"back\":\"返回\",\"username\":\"用戶名\",\"password\":\"密碼\",\"toggle\":\"切換{0}\",\"language\":\"語言\"};\n\nexport const I18nMap = { zh_TW: map_zh_TW, zh_CN: map_zh_CN, en_US: map_en_US };","import GlobalData from \"./GlobalData\";\r\nimport CubeAuth from \"./CubeAuth\";\r\nimport CubeLang from \"./CubeLang\";\r\n\r\nexport default {\r\n\r\n    install(app: any) {\r\n        app.use(GlobalData).use(CubeAuth).use(CubeLang);\r\n    }\r\n\r\n}","import { CubeAuthClient } from \"@/clients/CubeAuthClient\";\r\nimport { NetworkUtil } from \"cube-common-lib\";\r\nimport { GlobalDataInstance } from \"./GlobalData\";\r\n\r\ndeclare module '@vue/runtime-core' {\r\n    interface ComponentCustomProperties {\r\n        $auth: CubeAuthClient;\r\n    }\r\n};\r\n\r\nexport const CubeAuthInstance = new CubeAuthClient({\r\n    name: 'test',\r\n    tokenKey: 'token',\r\n    globalData: GlobalDataInstance,\r\n    onSaveToken(token) {\r\n        NetworkUtil.setAccessToken(token.accessToken);\r\n    },\r\n});\r\n\r\nexport default {\r\n    install(app: any) {\r\n        app.config.globalProperties.$auth = CubeAuthInstance;\r\n        CubeAuthInstance.init();\r\n    }\r\n};","import { CubeLangClient, CubeLangCore } from \"@/clients/CubeLangClient\"\r\nimport { I18nMap } from \"@/i18n/I18nMap\";\r\nimport { GlobalDataInstance } from \"./GlobalData\";\r\n\r\ndeclare module '@vue/runtime-core' {\r\n    interface ComponentCustomProperties extends CubeLangCore<LangMap> { }\r\n};\r\n\r\nexport default {\r\n\r\n    install(app: any) {\r\n        const lang = new CubeLangClient(I18nMap, () => GlobalDataInstance.get('langId', 'localStorage'));\r\n        app.config.globalProperties.$t = lang.$t.bind(lang);\r\n        app.config.globalProperties.$tr = lang.$tr.bind(lang);\r\n        app.config.globalProperties.$tk = lang.$tk.bind(lang);\r\n    }\r\n\r\n}","import { GlobalDataClient } from \"@/clients/GlobalDataClient\";\r\n\r\ndeclare module '@vue/runtime-core' {\r\n    interface ComponentCustomProperties {\r\n        $globalData: GlobalDataClient\r\n    }\r\n};\r\n\r\nexport const GlobalDataInstance = new GlobalDataClient();\r\n\r\nexport default {\r\n\r\n    install(app: any) {\r\n        app.config.globalProperties.$globalData = GlobalDataInstance;\r\n    }\r\n\r\n}","import { CommonUtil } from \"@/utils/CommonUtil\";\r\nimport { CubePontBasicRequest, NetworkUtil } from \"cube-common-lib\";\r\n\r\nexport class RequestConfig {\r\n\r\n    static set(client: any) {\r\n        NetworkUtil.setConfig({\r\n            httpRequestService: client,\r\n            basicUrl: 'http://192.168.1.214:9080',\r\n        });\r\n        CubePontBasicRequest.setConfig({\r\n            log: false,\r\n            isSuccess: res => res.__abp && res.success,\r\n            processResponseCallback: res => res.result,\r\n            errCallback(message) {\r\n                CommonUtil.showToast(message);\r\n            },\r\n        });\r\n    };\r\n\r\n}","import { TaroHttpClient } from '@/clients/TaroHttpClient';\r\nimport { RequestConfig } from './RequestConfig';\r\n\r\nexport default {\r\n\r\n    install() {\r\n        RequestConfig.set(new TaroHttpClient());\r\n    }\r\n\r\n}","import { createStore } from 'vuex';\n\nexport default createStore({\n    state: {\n        langId: null,\n\t\ttoken: null\n    },\n    mutations: {\n        setLangId(state, langId) {\n        \tstate.langId = langId;\n    \t},\n\t\tsetToken(state, token) {\n        \tstate.token = token;\n    \t}\n    },\n    actions: {\n    },\n    modules: {\n    }\n});\n    "],"names":[],"sourceRoot":""}